"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.collectFeatures = collectFeatures;
var _postcssSelectorParser = require("postcss-selector-parser");
var _pseudo_selector_name_set = require("./pseudo_selector_name_set");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
const PSEUDO_TYPE_CLASS = 'pseudo-class';
const PSEUDO_TYPE_ELEMENT = 'pseudo-element';
async function collectFeatures({
  node,
  parent
}) {
  const promises = [];
  const pseudoType = (0, _postcssSelectorParser.isPseudoElement)(node) ? PSEUDO_TYPE_ELEMENT : PSEUDO_TYPE_CLASS;
  const index = node.sourceIndex;
  const endIndex = index + node.toString().length;
  const [, vendorPrefix] = /^::?(-(?:webkit|moz|ms|o)-)/.exec(node.value) ?? [];
  const selector = node.value;
  const id = selector.replace(/^::?/, '');
  if (_pseudo_selector_name_set.pseudoSelectorNameSet.has(id)) {
    promises.push(Promise.resolve([{
      endIndex,
      id: `selectors.${id}`,
      index,
      name: `"${selector}" ${pseudoType}`,
      node: parent
    }]));
  } else if (vendorPrefix != null) {
    const selector = node.value.replace(vendorPrefix, '');
    const id = selector.replace(/^::?/, '');
    if (_pseudo_selector_name_set.pseudoSelectorNameSet.has(id)) {
      promises.push(Promise.resolve([{
        endIndex,
        id: `selectors.${id}`,
        index,
        name: `"${selector}" ${pseudoType}`,
        node: parent,
        prefix: vendorPrefix
      }]));
    }
  }
  switch (id) {
    case 'active':
      {
        promises.push(Promise.resolve().then(() => _interopRequireWildcard(require("../active/non_a_elements/collect_features"))).then(({
          collectFeatures
        }) => {
          return collectFeatures({
            node,
            parent
          });
        }));
        break;
      }
    case 'after':
      {
        promises.push(Promise.resolve().then(() => _interopRequireWildcard(require("../after/animation_and_transition_support/collect_features"))).then(({
          collectFeatures
        }) => {
          return collectFeatures({
            node,
            parent
          });
        }));
        break;
      }
    case 'backdrop':
      {
        promises.push(Promise.resolve().then(() => _interopRequireWildcard(require("../backdrop/dialog/collect_features"))).then(({
          collectFeatures
        }) => {
          return collectFeatures({
            node,
            parent
          });
        }));
        break;
      }
    case 'before':
      {
        promises.push(Promise.resolve().then(() => _interopRequireWildcard(require("../before/animation_and_transition_support/collect_features"))).then(({
          collectFeatures
        }) => {
          return collectFeatures({
            node,
            parent
          });
        }));
        break;
      }
    case 'cue':
      {
        promises.push(Promise.resolve().then(() => _interopRequireWildcard(require("../cue/selector_argument/collect_features"))).then(({
          collectFeatures
        }) => {
          return collectFeatures({
            node,
            parent
          });
        }));
        break;
      }
    case 'host':
      {
        promises.push(Promise.resolve().then(() => _interopRequireWildcard(require("../hostfunction/collect_features"))).then(({
          collectFeatures
        }) => {
          return collectFeatures({
            node,
            parent
          });
        }));
        break;
      }
    case 'hover':
      {
        promises.push(Promise.resolve().then(() => _interopRequireWildcard(require("../hover/collect_features"))).then(({
          collectFeatures
        }) => {
          return collectFeatures({
            node,
            parent
          });
        }));
        break;
      }
    case 'invalid':
      {
        promises.push(Promise.resolve().then(() => _interopRequireWildcard(require("../invalid/collect_features"))).then(({
          collectFeatures
        }) => {
          return collectFeatures({
            node,
            parent
          });
        }));
        break;
      }
    case 'marker':
      {
        promises.push(Promise.resolve().then(() => _interopRequireWildcard(require("../marker/animation_and_transition_support/collect_features"))).then(({
          collectFeatures
        }) => {
          return collectFeatures({
            node,
            parent
          });
        }));
        break;
      }
    case 'not':
      {
        promises.push(Promise.resolve().then(() => _interopRequireWildcard(require("../not/selector_list/collect_features"))).then(({
          collectFeatures
        }) => {
          return collectFeatures({
            node,
            parent
          });
        }));
        break;
      }
    case 'nth-child':
      {
        promises.push(Promise.resolve().then(() => _interopRequireWildcard(require("../nth-child/of_syntax/collect_features"))).then(({
          collectFeatures
        }) => {
          return collectFeatures({
            node,
            parent
          });
        }));
        break;
      }
    case 'nth-last-child':
      {
        promises.push(Promise.resolve().then(() => _interopRequireWildcard(require("../nth-last-child/of_syntax/collect_features"))).then(({
          collectFeatures
        }) => {
          return collectFeatures({
            node,
            parent
          });
        }));
        break;
      }
    case 'valid':
      {
        promises.push(Promise.resolve().then(() => _interopRequireWildcard(require("../valid/collect_features"))).then(({
          collectFeatures
        }) => {
          return collectFeatures({
            node,
            parent
          });
        }));
        break;
      }
  }
  const features = (await Promise.all(promises)).flat();
  return features;
}