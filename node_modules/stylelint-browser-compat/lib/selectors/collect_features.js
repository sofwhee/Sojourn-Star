"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.collectFeatures = collectFeatures;
var _postcssSelectorParser = _interopRequireDefault(require("postcss-selector-parser"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
async function collectFeatures({
  ignoreFeatures,
  node
}) {
  const promises = [];

  // Selector list
  promises.push(Promise.resolve(Array.from(node.selector.matchAll(/,/g)).map(matches => ({
    endIndex: matches.index + 1,
    id: `selectors.list`,
    index: matches.index,
    name: `Selector list`,
    node
  }))));
  const selectorRoot = await (0, _postcssSelectorParser.default)().ast(node.selector);
  selectorRoot.walk(selectorNode => {
    switch (selectorNode.type) {
      case 'combinator':
        {
          promises.push(Promise.resolve().then(() => _interopRequireWildcard(require("./__combinators/collect_features"))).then(({
            collectFeatures
          }) => collectFeatures({
            node: selectorNode,
            parent: node
          })));
          break;
        }
      case 'tag':
        {
          promises.push(Promise.resolve().then(() => _interopRequireWildcard(require("./__tags/collect_features"))).then(({
            collectFeatures
          }) => collectFeatures({
            node: selectorNode,
            parent: node
          })));
          break;
        }
      case 'id':
        {
          promises.push(Promise.resolve().then(() => _interopRequireWildcard(require("./__ids/collect_features"))).then(({
            collectFeatures
          }) => collectFeatures({
            node: selectorNode,
            parent: node
          })));
          break;
        }
      case 'class':
        {
          promises.push(Promise.resolve().then(() => _interopRequireWildcard(require("./__classes/collect_features"))).then(({
            collectFeatures
          }) => collectFeatures({
            node: selectorNode,
            parent: node
          })));
          break;
        }
      case 'attribute':
        {
          promises.push(Promise.resolve().then(() => _interopRequireWildcard(require("./__attributes/collect_features"))).then(({
            collectFeatures
          }) => collectFeatures({
            node: selectorNode,
            parent: node
          })));
          break;
        }
      case 'pseudo':
        {
          promises.push(Promise.resolve().then(() => _interopRequireWildcard(require("./__pseudos/collect_features"))).then(({
            collectFeatures
          }) => collectFeatures({
            node: selectorNode,
            parent: node
          })));
          break;
        }
      case 'universal':
        {
          promises.push(Promise.resolve().then(() => _interopRequireWildcard(require("./__universal/collect_features"))).then(({
            collectFeatures
          }) => collectFeatures({
            node: selectorNode,
            parent: node
          })));
          break;
        }
    }
  });
  promises.push(Promise.resolve().then(() => _interopRequireWildcard(require("../collect_features"))).then(({
    collectFeatures
  }) => {
    return collectFeatures({
      container: node,
      ignoreFeatures
    });
  }));
  const features = (await Promise.all(promises)).flat();
  return features;
}