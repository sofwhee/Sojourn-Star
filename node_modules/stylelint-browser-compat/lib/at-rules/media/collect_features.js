"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.collectFeatures = collectFeatures;
var _postcssMediaQueryParser = _interopRequireDefault(require("postcss-media-query-parser"));
var _postcssValueParser = _interopRequireWildcard(require("postcss-value-parser"));
var _media_feature_name_map = require("./media_feature_name_map");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
const RANGE_OPERATOR_SET = new Set(['>=', '<=', '>', '<', '=']);

/* https://github.com/stylelint/stylelint/blob/f48c1d1518d6429c7516ae73f3d81e452f57287a/lib/utils/isRangeContextMediaFeature.js */
function isRangeContextMediaFeature(mediaFeature) {
  return mediaFeature.includes('=') || mediaFeature.includes('<') || mediaFeature.includes('>');
}
async function collectFeatures({
  ignoreFeatures,
  node
}) {
  const promises = [];
  const mediaRoot = (0, _postcssMediaQueryParser.default)(node.params);
  mediaRoot.walk('media-feature', mediaFeatureNode => {
    const parent = mediaFeatureNode.parent;
    const mediaFeatureRangeContext = isRangeContextMediaFeature(parent?.value ?? '');
    let mediaFeature = null;
    if (mediaFeatureRangeContext) {
      const valueRoot = (0, _postcssValueParser.default)(mediaFeatureNode.value);
      for (const node of valueRoot.nodes) {
        if (node.type !== 'word' || RANGE_OPERATOR_SET.has(node.value) || (0, _postcssValueParser.unit)(node.value) !== false) {
          continue;
        }
        mediaFeature = {
          name: node.value,
          sourceIndex: mediaFeatureNode.sourceIndex + node.sourceIndex
        };
      }
    } else {
      mediaFeature = {
        name: mediaFeatureNode.value,
        sourceIndex: mediaFeatureNode.sourceIndex
      };
    }
    if (mediaFeature == null) {
      return;
    }
    const [vendorPrefix] = /^-(webkit|moz|ms|o)-/.exec(mediaFeature.name) ?? [];
    const offset = `@${node.name}${node.raws.afterName ?? ''}`.length;
    if (mediaFeatureRangeContext) {
      const index = offset + mediaFeatureNode.sourceIndex;
      const endIndex = index + mediaFeatureNode.value.length;
      promises.push(Promise.resolve([{
        endIndex,
        id: `at-rules.media.range_syntax`,
        index,
        name: `Range syntax for media queries`,
        node
      }]));
    }
    const featureId = _media_feature_name_map.mediaFeatureNameMap.get(mediaFeature.name);
    if (featureId != null) {
      const index = offset + mediaFeature.sourceIndex;
      const endIndex = index + mediaFeature.name.length;
      promises.push(Promise.resolve([{
        endIndex,
        id: featureId,
        index,
        name: `"${mediaFeature.name}" media feature`,
        node
      }]));
    } else if (vendorPrefix != null) {
      const mediaFeatureName = mediaFeature.name.replace(vendorPrefix, '');
      const featureId = _media_feature_name_map.mediaFeatureNameMap.get(mediaFeature.name);
      if (featureId != null) {
        const index = offset + mediaFeature.sourceIndex;
        const endIndex = index + mediaFeature.name.length;
        promises.push(Promise.resolve([{
          endIndex,
          id: featureId,
          index,
          name: `"${mediaFeatureName}" media feature`,
          node,
          prefix: vendorPrefix
        }]));
      }
    }
  });
  promises.push(Promise.resolve().then(() => _interopRequireWildcard(require("../../collect_features"))).then(({
    collectFeatures
  }) => {
    return collectFeatures({
      container: node,
      ignoreFeatures
    });
  }));
  const features = (await Promise.all(promises)).flat();
  return features;
}