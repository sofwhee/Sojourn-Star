"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.collectFeatures = collectFeatures;
var _postcssValueParser = _interopRequireDefault(require("postcss-value-parser"));
var _descriptor_name_set = require("./descriptor_name_set");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
async function collectFeatures({
  node
}) {
  const promises = [];
  node.walkDecls(delc => {
    const [vendorPrefix] = /^-(webkit|moz|ms|o)-/.exec(delc.prop) ?? [];
    if (_descriptor_name_set.descriptorNameSet.has(delc.prop)) {
      promises.push(Promise.resolve([{
        endIndex: delc.prop.length,
        id: `at-rules.font-face.${delc.prop}`,
        index: 0,
        name: `"${delc.prop}" descriptor of the @font-face`,
        node: delc
      }]));
    } else if (vendorPrefix != null) {
      const name = delc.prop.replace(vendorPrefix, '');
      if (_descriptor_name_set.descriptorNameSet.has(name)) {
        promises.push(Promise.resolve([{
          endIndex: delc.prop.length,
          id: `at-rules.font-face.${name}`,
          index: 0,
          name: `"${name}" descriptor of the @font-face`,
          node: delc,
          prefix: vendorPrefix
        }]));
      }
    }
    const valueRoot = (0, _postcssValueParser.default)(delc.value);
    if (delc.prop === 'src') {
      for (const valueNode of valueRoot.nodes) {
        if (valueNode.type === 'function' && valueNode.value === 'url') {
          promises.push(Promise.resolve().then(() => _interopRequireWildcard(require("./__font_type/collect_features"))).then(({
            collectFeatures
          }) => {
            return collectFeatures({
              node: valueNode,
              parent: delc
            });
          }));
        }
      }
    }
  });
  const features = (await Promise.all(promises)).flat();
  return features;
}