"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.collectFeatures = collectFeatures;
var _at_rules_name_set = require("./at_rules_name_set");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
async function collectFeatures({
  ignoreFeatures,
  node
}) {
  const promises = [];
  if (_at_rules_name_set.atRulesNameSet.has(node.name)) {
    promises.push(Promise.resolve([{
      endIndex: `@${node.name}`.length,
      id: `at-rules.${node.name}`,
      index: 0,
      name: `"@${node.name}" at rules`,
      node
    }]));
  }
  switch (node.name) {
    case 'counter-style':
      {
        promises.push(Promise.resolve().then(() => _interopRequireWildcard(require("./counter-style/collect_features"))).then(({
          collectFeatures
        }) => {
          return collectFeatures({
            node
          });
        }));
        break;
      }
    case 'document':
      {
        promises.push(Promise.resolve().then(() => _interopRequireWildcard(require("./document/collect_features"))).then(({
          collectFeatures
        }) => {
          return collectFeatures({
            ignoreFeatures,
            node
          });
        }));
        break;
      }
    case 'font-face':
      {
        promises.push(Promise.resolve().then(() => _interopRequireWildcard(require("./font-face/collect_features"))).then(({
          collectFeatures
        }) => {
          return collectFeatures({
            node
          });
        }));
        break;
      }
    case 'font-feature-values':
      {
        promises.push(Promise.resolve().then(() => _interopRequireWildcard(require("./font-feature-values/collect_features"))).then(({
          collectFeatures
        }) => {
          return collectFeatures({
            node
          });
        }));
        break;
      }
    case 'media':
      {
        promises.push(Promise.resolve().then(() => _interopRequireWildcard(require("./media/collect_features"))).then(({
          collectFeatures
        }) => {
          return collectFeatures({
            ignoreFeatures,
            node
          });
        }));
        break;
      }
    case 'page':
      {
        promises.push(Promise.resolve().then(() => _interopRequireWildcard(require("./page/collect_features"))).then(({
          collectFeatures
        }) => {
          return collectFeatures({
            ignoreFeatures,
            node
          });
        }));
        break;
      }
    case 'property':
      {
        promises.push(Promise.resolve().then(() => _interopRequireWildcard(require("./property/collect_features"))).then(({
          collectFeatures
        }) => {
          return collectFeatures({
            node
          });
        }));
        break;
      }
  }
  const features = (await Promise.all(promises)).flat();
  return features;
}