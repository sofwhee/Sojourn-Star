"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isSupported = isSupported;
var _semver = _interopRequireDefault(require("semver"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function isSupported(supportBlock, target, options) {
  const supportList = [supportBlock[target.target.mdn]].flat().filter(v => v != null);
  for (const s of supportList) {
    if (s.alternative_name != null) {
      // TODO
      continue;
    }
    if (Array.isArray(s.flags) && !options.allow.flagged) {
      continue;
    }
    if (s.partial_implementation === true && !options.allow.partialImplementation) {
      continue;
    }
    if (s.prefix != null && !options.allow.prefix) {
      continue;
    }
    if (s.version_added === true) {
      return true;
    }
    if (s.version_added === false) {
      return false;
    }
    if (s.version_added == null) {
      return false;
    }
    if (s.version_added.startsWith('â‰¤')) {
      return true;
    }
    const addedSemver = _semver.default.minVersion(s.version_added);
    const targetSemver = _semver.default.minVersion(target.version.toString(10));
    if (addedSemver == null || targetSemver == null) {
      continue;
    }
    if (_semver.default.lte(addedSemver, targetSemver)) {
      if (typeof s.version_removed !== 'string') {
        return true;
      }
      const removedSemver = _semver.default.minVersion(s.version_removed);
      if (removedSemver == null) {
        return true;
      }
      if (_semver.default.gt(removedSemver, targetSemver)) {
        return true;
      }
    }
  }
  return false;
}