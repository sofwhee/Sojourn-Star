"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.collectFeatures = collectFeatures;
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
async function collectFeatures({
  nodes,
  parent
}) {
  const prop = parent.prop.replace(/^-(webkit|moz|ms|o)-/, '');
  if (prop !== 'background' && prop !== 'background-image') {
    return [];
  }
  const promises = [];
  const features = [];
  const offset = parent.prop.length + (parent.raws.between?.length ?? 0);
  let isMultipleBackground = false;
  for (const node of nodes) {
    if (node.type === 'div' && node.value === ',') {
      isMultipleBackground = true;
      continue;
    }
    if (node.type !== 'function') {
      continue;
    }
    const funcName = node.value.replace(/^-(webkit|moz|ms|o)-/, '');
    const index = offset + node.sourceIndex;
    const endIndex = offset + node.sourceEndIndex;
    switch (funcName) {
      case 'element':
        {
          features.push({
            endIndex,
            id: `properties.background-image.element`,
            index,
            name: `"element()" function specified as background-image`,
            node: parent
          });
          break;
        }
      case 'conic-gradient':
      case 'linear-gradient':
      case 'radial-gradient':
      case 'repeating-conic-gradient':
      case 'repeating-linear-gradient':
      case 'repeating-radial-gradient':
        {
          features.push({
            endIndex,
            id: `properties.background-image.gradients`,
            index,
            name: `Gradient function specified as background-image`,
            node: parent
          });
          break;
        }
      case 'image-rect':
        {
          features.push({
            endIndex,
            id: `properties.background-image.image-rect`,
            index,
            name: `"image-rect()" function specified as background-image`,
            node: parent
          });
          break;
        }
      case 'image-set':
        {
          features.push({
            endIndex,
            id: `properties.background-image.image-set`,
            index,
            name: `"image-set()" function specified as background-image`,
            node: parent
          });
          promises.push(Promise.resolve().then(() => _interopRequireWildcard(require("./svg_images/collect_features"))).then(({
            collectFeatures
          }) => {
            return collectFeatures({
              nodes: node.nodes,
              parent
            });
          }));
          break;
        }
      case 'url':
        {
          promises.push(Promise.resolve().then(() => _interopRequireWildcard(require("./svg_images/collect_features"))).then(({
            collectFeatures
          }) => {
            return collectFeatures({
              nodes: [node],
              parent
            });
          }));
          break;
        }
    }
  }
  if (isMultipleBackground) {
    const index = offset;
    const endIndex = offset + parent.value.length;
    features.push({
      endIndex,
      id: `properties.background-image.multiple_backgrounds`,
      index,
      name: `Multiple backgrounds`,
      node: parent
    });
  }
  return [...features, ...(await Promise.all(promises)).flat()];
}