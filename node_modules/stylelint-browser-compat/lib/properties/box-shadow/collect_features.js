"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.collectFeatures = collectFeatures;
var _arrayPrototype = _interopRequireDefault(require("array.prototype.at"));
var _postcssValueParser = require("postcss-value-parser");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
async function collectFeatures({
  nodes,
  parent
}) {
  const prop = parent.prop.replace(/^-(webkit|moz|ms|o)-/, '');
  if (prop !== 'box-shadow') {
    return [];
  }
  const features = [];
  const boxShadowList = [[]];
  for (const node of nodes) {
    if (node.type === 'div' && node.value === ',') {
      boxShadowList.push([]);
    } else {
      const boxShadow = (0, _arrayPrototype.default)(boxShadowList, -1);
      boxShadow?.push(node);
    }
  }
  const offset = parent.prop.length + (parent.raws.between?.length ?? 0);
  if (boxShadowList.length >= 2) {
    const index = offset;
    const endIndex = offset + parent.value.length;
    features.push({
      endIndex,
      id: `properties.box-shadow.multiple_shadows`,
      index,
      name: `Multiple shadows`,
      node: parent
    });
  }
  let hasLengthValue = false;
  for (const boxShadow of boxShadowList) {
    for (let idx = 0; idx < boxShadow.length; idx++) {
      const first = boxShadow[idx];
      if (first?.type === 'word' && first.value === 'inset') {
        const index = offset + first.sourceIndex;
        const endIndex = offset + first.sourceEndIndex;
        features.push({
          endIndex,
          id: `properties.box-shadow.inset`,
          index,
          name: `"inset" value specified as box-shadow`,
          node: parent
        });
        continue;
      }
      if (hasLengthValue) {
        continue;
      }
      if (first?.type === 'word' && (0, _postcssValueParser.unit)(first.value) !== false) {
        hasLengthValue = true;
        const fourth = boxShadow[idx + 6];
        if (fourth?.type === 'word' && (0, _postcssValueParser.unit)(fourth.value) !== false) {
          const index = offset + fourth.sourceIndex;
          const endIndex = offset + fourth.sourceEndIndex;
          features.push({
            endIndex,
            id: `properties.box-shadow.spread_radius`,
            index,
            name: `Spread radius value specified as box-shadow`,
            node: parent
          });
          continue;
        }
      }
    }
  }
  return features;
}