"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.collectFeatures = collectFeatures;
var _postcssValueParser = require("postcss-value-parser");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
const BG_SIZE_SINGLE_KEYWORD_LIST = ['contain', 'cover'];
function isValidBgSizeValue(node) {
  if (node == null) {
    return false;
  }
  if (node.type === 'word') {
    return node.value === 'auto' || (0, _postcssValueParser.unit)(node.value) !== false;
  }
  if (node.type === 'function') {
    return node.value === 'calc';
  }
  return false;
}
async function collectFeatures({
  bgLayerList,
  parent
}) {
  const prop = parent.prop.replace(/^-(webkit|moz|ms|o)-/, '');
  if (prop !== 'background') {
    return [];
  }
  const offset = parent.prop.length + (parent.raws.between?.length ?? 0);
  const promises = [];
  const features = [];

  // background-size
  for (const bgLayer of bgLayerList) {
    const slashDivNodeIndex = bgLayer.findIndex(node => node.type === 'div' && node.value === '/');
    if (slashDivNodeIndex === -1) {
      continue;
    }
    const firstValueNode = bgLayer[slashDivNodeIndex + 1];
    const secondValueNode = bgLayer[slashDivNodeIndex + 3];
    if (firstValueNode == null) {
      continue;
    }
    if (BG_SIZE_SINGLE_KEYWORD_LIST.includes(firstValueNode.value)) {
      const index = offset + firstValueNode.sourceIndex;
      const endIndex = offset + firstValueNode.sourceEndIndex;
      features.push({
        endIndex,
        id: `properties.background.background-size`,
        index,
        name: `Values of background-size specified as background`,
        node: parent
      });
      promises.push(Promise.resolve().then(() => _interopRequireWildcard(require("../../background-size/collect_features"))).then(({
        collectFeatures
      }) => {
        return collectFeatures({
          nodes: [firstValueNode],
          parent
        });
      }));
    } else if (isValidBgSizeValue(firstValueNode)) {
      if (isValidBgSizeValue(secondValueNode)) {
        const index = offset + firstValueNode.sourceIndex;
        const endIndex = offset + secondValueNode.sourceEndIndex;
        features.push({
          endIndex,
          id: `properties.background.background-size`,
          index,
          name: `Values of background-size specified as background`,
          node: parent
        });
      } else {
        const index = offset + firstValueNode.sourceIndex;
        const endIndex = offset + firstValueNode.sourceEndIndex;
        features.push({
          endIndex,
          id: `properties.background.background-size`,
          index,
          name: `Values of background-size specified as background`,
          node: parent
        });
      }
    }
  }
  return [...features, ...(await Promise.all(promises)).flat()];
}