"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.collectFeatures = collectFeatures;
var _property_name_set = require("./property_name_set");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
async function collectFeatures({
  node,
  valueRoot
}) {
  const promises = [];
  const [vendorPrefix] = /^-(webkit|moz|ms|o)-/.exec(node.prop) ?? [];
  if (_property_name_set.propertyNameSet.has(node.prop)) {
    promises.push(Promise.resolve([{
      endIndex: node.prop.length,
      id: `properties.${node.prop}`,
      index: 0,
      name: `"${node.prop}" property`,
      node
    }]));
  } else if (vendorPrefix != null) {
    const prop = node.prop.replace(vendorPrefix, '');
    if (_property_name_set.propertyNameSet.has(prop)) {
      promises.push(Promise.resolve([{
        endIndex: node.prop.length,
        id: `properties.${prop}`,
        index: 0,
        name: `"${prop}" property`,
        node: node,
        prefix: vendorPrefix
      }]));
    }
  }
  const normalizedProps = _property_name_set.propertyNameSet.has(node.prop) ? node.prop : node.prop.replace(/^-(webkit|moz|ms|o)-/, '');
  switch (normalizedProps) {
    case '-moz-orient':
      {
        promises.push(Promise.resolve().then(() => _interopRequireWildcard(require("./-moz-orient/collect_features"))).then(({
          collectFeatures
        }) => {
          return collectFeatures({
            nodes: valueRoot.nodes,
            parent: node
          });
        }));
        break;
      }
    case '-moz-user-input':
      {
        promises.push(Promise.resolve().then(() => _interopRequireWildcard(require("./-moz-user-input/collect_features"))).then(({
          collectFeatures
        }) => {
          return collectFeatures({
            nodes: valueRoot.nodes,
            parent: node
          });
        }));
        break;
      }
    case 'animation':
      {
        promises.push(Promise.resolve().then(() => _interopRequireWildcard(require("./animation-direction/collect_features"))).then(({
          collectFeatures
        }) => {
          return collectFeatures({
            nodes: valueRoot.nodes,
            parent: node
          });
        }));
        promises.push(Promise.resolve().then(() => _interopRequireWildcard(require("./animation-timing-function/collect_features"))).then(({
          collectFeatures
        }) => {
          return collectFeatures({
            nodes: valueRoot.nodes,
            parent: node
          });
        }));
        break;
      }
    case 'animation-direction':
      {
        promises.push(Promise.resolve().then(() => _interopRequireWildcard(require("./animation-direction/collect_features"))).then(({
          collectFeatures
        }) => {
          return collectFeatures({
            nodes: valueRoot.nodes,
            parent: node
          });
        }));
        break;
      }
    case 'animation-timing-function':
      {
        promises.push(Promise.resolve().then(() => _interopRequireWildcard(require("./animation-timing-function/collect_features"))).then(({
          collectFeatures
        }) => {
          return collectFeatures({
            nodes: valueRoot.nodes,
            parent: node
          });
        }));
        break;
      }
    case 'align-content':
      {
        promises.push(Promise.resolve().then(() => _interopRequireWildcard(require("./align-content/collect_features"))).then(({
          collectFeatures
        }) => {
          return collectFeatures({
            nodes: valueRoot.nodes,
            parent: node
          });
        }));
        break;
      }
    case 'align-items':
      {
        promises.push(Promise.resolve().then(() => _interopRequireWildcard(require("./align-items/collect_features"))).then(({
          collectFeatures
        }) => {
          return collectFeatures({
            nodes: valueRoot.nodes,
            parent: node
          });
        }));
        break;
      }
    case 'align-self':
      {
        promises.push(Promise.resolve().then(() => _interopRequireWildcard(require("./align-self/collect_features"))).then(({
          collectFeatures
        }) => {
          return collectFeatures({
            nodes: valueRoot.nodes,
            parent: node
          });
        }));
        break;
      }
    case 'appearance':
      {
        promises.push(Promise.resolve().then(() => _interopRequireWildcard(require("./appearance/collect_features"))).then(({
          collectFeatures
        }) => {
          return collectFeatures({
            nodes: valueRoot.nodes,
            parent: node
          });
        }));
        break;
      }
    case 'background':
      {
        promises.push(Promise.resolve().then(() => _interopRequireWildcard(require("./background/collect_features"))).then(({
          collectFeatures
        }) => {
          return collectFeatures({
            nodes: valueRoot.nodes,
            parent: node
          });
        }));
        break;
      }
    case 'background-attachment':
      {
        promises.push(Promise.resolve().then(() => _interopRequireWildcard(require("./background-attachment/collect_features"))).then(({
          collectFeatures
        }) => {
          return collectFeatures({
            nodes: valueRoot.nodes,
            parent: node
          });
        }));
        break;
      }
    case 'background-clip':
      {
        promises.push(Promise.resolve().then(() => _interopRequireWildcard(require("./background-clip/collect_features"))).then(({
          collectFeatures
        }) => {
          return collectFeatures({
            nodes: valueRoot.nodes,
            parent: node
          });
        }));
        break;
      }
    case 'background-image':
      {
        promises.push(Promise.resolve().then(() => _interopRequireWildcard(require("./background-image/collect_features"))).then(({
          collectFeatures
        }) => {
          return collectFeatures({
            nodes: valueRoot.nodes,
            parent: node
          });
        }));
        break;
      }
    case 'background-origin':
      {
        promises.push(Promise.resolve().then(() => _interopRequireWildcard(require("./background-origin/collect_features"))).then(({
          collectFeatures
        }) => {
          return collectFeatures({
            nodes: valueRoot.nodes,
            parent: node
          });
        }));
        break;
      }
    case 'background-position':
      {
        promises.push(Promise.resolve().then(() => _interopRequireWildcard(require("./background-position/collect_features"))).then(({
          collectFeatures
        }) => {
          return collectFeatures({
            nodes: valueRoot.nodes,
            parent: node
          });
        }));
        break;
      }
    case 'background-repeat':
      {
        promises.push(Promise.resolve().then(() => _interopRequireWildcard(require("./background-repeat/collect_features"))).then(({
          collectFeatures
        }) => {
          return collectFeatures({
            nodes: valueRoot.nodes,
            parent: node
          });
        }));
        break;
      }
    case 'background-size':
      {
        promises.push(Promise.resolve().then(() => _interopRequireWildcard(require("./background-size/collect_features"))).then(({
          collectFeatures
        }) => {
          return collectFeatures({
            nodes: valueRoot.nodes,
            parent: node
          });
        }));
        break;
      }
    case 'block-size':
      {
        promises.push(Promise.resolve().then(() => _interopRequireWildcard(require("./block-size/collect_features"))).then(({
          collectFeatures
        }) => {
          return collectFeatures({
            nodes: valueRoot.nodes,
            parent: node
          });
        }));
        break;
      }
    case 'border-bottom-left-radius':
      {
        promises.push(Promise.resolve().then(() => _interopRequireWildcard(require("./border-bottom-left-radius/collect_features"))).then(({
          collectFeatures
        }) => {
          return collectFeatures({
            nodes: valueRoot.nodes,
            parent: node
          });
        }));
        break;
      }
    case 'border-bottom-right-radius':
      {
        promises.push(Promise.resolve().then(() => _interopRequireWildcard(require("./border-bottom-right-radius/collect_features"))).then(({
          collectFeatures
        }) => {
          return collectFeatures({
            nodes: valueRoot.nodes,
            parent: node
          });
        }));
        break;
      }
    case 'border-top-left-radius':
      {
        promises.push(Promise.resolve().then(() => _interopRequireWildcard(require("./border-top-left-radius/collect_features"))).then(({
          collectFeatures
        }) => {
          return collectFeatures({
            nodes: valueRoot.nodes,
            parent: node
          });
        }));
        break;
      }
    case 'border-top-right-radius':
      {
        promises.push(Promise.resolve().then(() => _interopRequireWildcard(require("./border-top-right-radius/collect_features"))).then(({
          collectFeatures
        }) => {
          return collectFeatures({
            nodes: valueRoot.nodes,
            parent: node
          });
        }));
        break;
      }
    case 'border-radius':
      {
        promises.push(Promise.resolve().then(() => _interopRequireWildcard(require("./border-radius/collect_features"))).then(({
          collectFeatures
        }) => {
          return collectFeatures({
            nodes: valueRoot.nodes,
            parent: node
          });
        }));
        break;
      }
    case 'box-shadow':
      {
        promises.push(Promise.resolve().then(() => _interopRequireWildcard(require("./box-shadow/collect_features"))).then(({
          collectFeatures
        }) => {
          return collectFeatures({
            nodes: valueRoot.nodes,
            parent: node
          });
        }));
        break;
      }
    case 'box-sizing':
      {
        promises.push(Promise.resolve().then(() => _interopRequireWildcard(require("./box-sizing/collect_features"))).then(({
          collectFeatures
        }) => {
          return collectFeatures({
            nodes: valueRoot.nodes,
            parent: node
          });
        }));
        break;
      }
    case 'caption-side':
      {
        promises.push(Promise.resolve().then(() => _interopRequireWildcard(require("./caption-side/collect_features"))).then(({
          collectFeatures
        }) => {
          return collectFeatures({
            nodes: valueRoot.nodes,
            parent: node
          });
        }));
        break;
      }
    case 'clear':
      {
        promises.push(Promise.resolve().then(() => _interopRequireWildcard(require("./clear/collect_features"))).then(({
          collectFeatures
        }) => {
          return collectFeatures({
            nodes: valueRoot.nodes,
            parent: node
          });
        }));
        break;
      }
    case 'clip-path':
      {
        promises.push(Promise.resolve().then(() => _interopRequireWildcard(require("./clip-path/collect_features"))).then(({
          collectFeatures
        }) => {
          return collectFeatures({
            nodes: valueRoot.nodes,
            parent: node
          });
        }));
        break;
      }
    case 'color-scheme':
      {
        promises.push(Promise.resolve().then(() => _interopRequireWildcard(require("./color-scheme/collect_features"))).then(({
          collectFeatures
        }) => {
          return collectFeatures({
            nodes: valueRoot.nodes,
            parent: node
          });
        }));
        break;
      }
    case 'justify-content':
      {
        promises.push(Promise.resolve().then(() => _interopRequireWildcard(require("./justify-content/collect_features"))).then(({
          collectFeatures
        }) => {
          return collectFeatures({
            nodes: valueRoot.nodes,
            parent: node
          });
        }));
        break;
      }
    default:
      {
        // TODO...
      }
  }
  const features = (await Promise.all(promises)).flat();
  return features;
}