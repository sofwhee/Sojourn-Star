"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.collectFeatures = collectFeatures;
var _arrayPrototype = _interopRequireDefault(require("array.prototype.at"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
const REPEAT_SINGLE_KEYWORD_LIST = ['repeat-x', 'repeat-y'];
const REPEAT_GENERAL_KEYWORD_LIST = ['repeat', 'space', 'round', 'no-repeat'];
const REPEAT_KEYWORD_LIST = [...REPEAT_SINGLE_KEYWORD_LIST, ...REPEAT_GENERAL_KEYWORD_LIST];
async function collectFeatures({
  nodes,
  parent
}) {
  const prop = parent.prop.replace(/^-(webkit|moz|ms|o)-/, '');
  if (prop !== 'background' && prop !== 'background-repeat') {
    return [];
  }
  const promises = [];
  const features = [];
  const bgRepeatList = [[]];
  for (const node of nodes) {
    if (node.type === 'div' && node.value === ',') {
      bgRepeatList.push([]);
    } else {
      const bgRepeat = (0, _arrayPrototype.default)(bgRepeatList, -1);
      bgRepeat?.push(node);
    }
  }
  const offset = parent.prop.length + (parent.raws.between?.length ?? 0);
  if (bgRepeatList.length >= 2) {
    const index = offset;
    const endIndex = offset + parent.value.length;
    features.push({
      endIndex,
      id: `properties.background-repeat.multiple_backgrounds`,
      index,
      name: `Multiple backgrounds`,
      node: parent
    });
  }
  for (const bgRepeat of bgRepeatList) {
    for (let idx = 0; idx < bgRepeat.length; idx++) {
      const first = bgRepeat[idx];
      const second = bgRepeat[idx + 2];
      if (first?.type !== 'word' || !REPEAT_KEYWORD_LIST.includes(first.value)) {
        continue;
      }
      if (!REPEAT_GENERAL_KEYWORD_LIST.includes(first.value)) {
        break;
      }
      if (second?.type === 'word' && REPEAT_GENERAL_KEYWORD_LIST.includes(second.value)) {
        const index = offset + first.sourceIndex;
        const endIndex = offset + second.sourceEndIndex;
        features.push({
          endIndex,
          id: `properties.background-repeat.2-value`,
          index,
          name: `Different values for x & y directions specified as background-repeat`,
          node: parent
        });
        promises.push(Promise.resolve().then(() => _interopRequireWildcard(require("./round/collect_features"))).then(({
          collectFeatures
        }) => {
          return collectFeatures({
            nodes: [first, second],
            parent
          });
        }));
        promises.push(Promise.resolve().then(() => _interopRequireWildcard(require("./space/collect_features"))).then(({
          collectFeatures
        }) => {
          return collectFeatures({
            nodes: [first, second],
            parent
          });
        }));
        break;
      } else {
        promises.push(Promise.resolve().then(() => _interopRequireWildcard(require("./round/collect_features"))).then(({
          collectFeatures
        }) => {
          return collectFeatures({
            nodes: [first],
            parent
          });
        }));
        promises.push(Promise.resolve().then(() => _interopRequireWildcard(require("./space/collect_features"))).then(({
          collectFeatures
        }) => {
          return collectFeatures({
            nodes: [first],
            parent
          });
        }));
        break;
      }
    }
  }
  return [...features, ...(await Promise.all(promises)).flat()];
}