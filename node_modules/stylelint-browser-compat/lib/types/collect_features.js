"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.collectFeatures = collectFeatures;
var _postcssValueParser = require("postcss-value-parser");
var _function_name_map = require("./function_name_map");
var _unit_name_map = require("./unit_name_map");
var _value_name_map = require("./value_name_map");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
async function collectFeatures({
  nodes,
  parent
}) {
  const promises = [];
  const features = [];
  const offset = parent.prop.length + (parent.raws.between?.length ?? 0);
  (0, _postcssValueParser.walk)(nodes, node => {
    if (node.type === 'function') {
      const functionName = node.value;
      const featureId = _function_name_map.functionNameMap.get(functionName);
      if (featureId != null) {
        const index = offset + node.sourceIndex;
        const endIndex = offset + node.sourceEndIndex;
        features.push({
          endIndex,
          id: featureId,
          index,
          name: `"${functionName}()" function`,
          node: parent
        });
        promises.push(Promise.resolve().then(() => _interopRequireWildcard(require("./__function/collect_features"))).then(({
          collectFeatures
        }) => {
          return collectFeatures({
            functionName,
            node,
            parent
          });
        }));
      } else {
        const functionName = node.value.replace(/^-(?:ms|o|webkit|moz)-/, '');
        const featureId = _function_name_map.functionNameMap.get(functionName);
        if (featureId != null) {
          const index = offset + node.sourceIndex;
          const endIndex = offset + node.sourceEndIndex;
          features.push({
            endIndex,
            id: featureId,
            index,
            name: `"${functionName}()" function`,
            node: parent
          });
        }
        promises.push(Promise.resolve().then(() => _interopRequireWildcard(require("./__function/collect_features"))).then(({
          collectFeatures
        }) => {
          return collectFeatures({
            functionName,
            node,
            parent
          });
        }));
      }
    }
    if (node.type === 'word') {
      const dimension = (0, _postcssValueParser.unit)(node.value);
      if (dimension !== false) {
        const featureId = _unit_name_map.unitNameMap.get(dimension.unit);
        if (featureId != null) {
          const index = offset + node.sourceIndex + dimension.number.length;
          const endIndex = offset + node.sourceEndIndex;
          features.push({
            endIndex,
            id: featureId,
            index,
            name: `"${dimension.unit}" unit`,
            node: parent
          });
        }
        promises.push(Promise.resolve().then(() => _interopRequireWildcard(require("./number/scientific_notation/collect_features"))).then(({
          collectFeatures
        }) => {
          return collectFeatures({
            dimension,
            node,
            parent
          });
        }));
      } else {
        const featureId = _value_name_map.valueNameMap.get(node.value);
        if (featureId != null) {
          const index = offset + node.sourceIndex;
          const endIndex = offset + node.sourceEndIndex;
          features.push({
            endIndex,
            id: featureId,
            index,
            name: `"${node.value}" value`,
            node: parent
          });
        }
        if (/^#[0-9A-Fa-f]{3,8}$/.test(node.value)) {
          promises.push(Promise.resolve().then(() => _interopRequireWildcard(require("./color/rgb_hexadecimal_notation/collect_features"))).then(({
            collectFeatures
          }) => {
            return collectFeatures({
              node,
              parent
            });
          }));
        }
      }
    }
  });
  return [...features, ...(await Promise.all(promises)).flat()];
}