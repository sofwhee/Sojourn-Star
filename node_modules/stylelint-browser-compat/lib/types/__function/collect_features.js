"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.collectFeatures = collectFeatures;
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
async function collectFeatures({
  functionName,
  node,
  parent
}) {
  const promises = [];
  switch (functionName) {
    case 'attr':
      {
        promises.push(Promise.resolve().then(() => _interopRequireWildcard(require("../attr/collect_features"))).then(({
          collectFeatures
        }) => {
          return collectFeatures({
            node,
            parent
          });
        }));
        break;
      }
    case 'calc':
      {
        promises.push(Promise.resolve().then(() => _interopRequireWildcard(require("../calc/collect_features"))).then(({
          collectFeatures
        }) => {
          return collectFeatures({
            node,
            parent
          });
        }));
        break;
      }
    case 'hsl':
      {
        promises.push(Promise.resolve().then(() => _interopRequireWildcard(require("../color/__alpha_parameter/collect_features"))).then(({
          collectFeatures
        }) => {
          return collectFeatures({
            node,
            parent
          });
        }));
        promises.push(Promise.resolve().then(() => _interopRequireWildcard(require("../color/__space_separated_parameters/collect_features"))).then(({
          collectFeatures
        }) => {
          return collectFeatures({
            node,
            parent
          });
        }));
        break;
      }
    case 'hsla':
      {
        promises.push(Promise.resolve().then(() => _interopRequireWildcard(require("../color/__space_separated_parameters/collect_features"))).then(({
          collectFeatures
        }) => {
          return collectFeatures({
            node,
            parent
          });
        }));
        break;
      }
    case 'rgb':
      {
        promises.push(Promise.resolve().then(() => _interopRequireWildcard(require("../color/__alpha_parameter/collect_features"))).then(({
          collectFeatures
        }) => {
          return collectFeatures({
            node,
            parent
          });
        }));
        promises.push(Promise.resolve().then(() => _interopRequireWildcard(require("../color/__space_separated_parameters/collect_features"))).then(({
          collectFeatures
        }) => {
          return collectFeatures({
            node,
            parent
          });
        }));
        promises.push(Promise.resolve().then(() => _interopRequireWildcard(require("../color/__float_values/collect_features"))).then(({
          collectFeatures
        }) => {
          return collectFeatures({
            node,
            parent
          });
        }));
        break;
      }
    case 'rgba':
      {
        promises.push(Promise.resolve().then(() => _interopRequireWildcard(require("../color/__space_separated_parameters/collect_features"))).then(({
          collectFeatures
        }) => {
          return collectFeatures({
            node,
            parent
          });
        }));
        promises.push(Promise.resolve().then(() => _interopRequireWildcard(require("../color/__float_values/collect_features"))).then(({
          collectFeatures
        }) => {
          return collectFeatures({
            node,
            parent
          });
        }));
        break;
      }
    case 'steps':
      {
        promises.push(Promise.resolve().then(() => _interopRequireWildcard(require("../easing-function/steps/jump/collect_features"))).then(({
          collectFeatures
        }) => {
          return collectFeatures({
            node,
            parent
          });
        }));
        break;
      }
    case 'conic-gradient':
      {
        promises.push(Promise.resolve().then(() => _interopRequireWildcard(require("../image/gradient/conic-gradient/collect_features"))).then(({
          collectFeatures
        }) => {
          return collectFeatures({
            node,
            parent
          });
        }));
        break;
      }
    case 'linear-gradient':
    case 'repeating-linear-gradient':
      {
        promises.push(Promise.resolve().then(() => _interopRequireWildcard(require("../image/gradient/__linear-gradient/collect_features"))).then(({
          collectFeatures
        }) => {
          return collectFeatures({
            node,
            parent
          });
        }));
        break;
      }
    case 'radial-gradient':
    case 'repeating-radial-gradient':
      {
        promises.push(Promise.resolve().then(() => _interopRequireWildcard(require("../image/gradient/__radial-gradient/collect_features"))).then(({
          collectFeatures
        }) => {
          return collectFeatures({
            node,
            parent
          });
        }));
        break;
      }
  }
  const features = (await Promise.all(promises)).flat();
  return features;
}