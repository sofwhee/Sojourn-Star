"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.collectFeatures = collectFeatures;
var _postcssValueParser = require("postcss-value-parser");
const RULE_NAME_MAP = {
  rgb: `types.color.rgb.float_values`,
  rgba: `types.color.rgb.float_values`
};
const FUNCTION_NAME_LIST = ['rgb', 'rgba'];
function isTargetFunctionNameList(value) {
  return FUNCTION_NAME_LIST.includes(value);
}
async function collectFeatures({
  node,
  parent
}) {
  const funcName = node.value.replace(/^-(?:ms|o|webkit|moz)-/, '');
  if (!isTargetFunctionNameList(funcName)) {
    return [];
  }
  const features = [];
  const offset = parent.prop.length + (parent.raws.between?.length ?? 0);
  if (node.nodes.length >= 5 && node.nodes[0]?.type === 'word' && node.nodes[2]?.type === 'word' && node.nodes[4]?.type === 'word') {
    const includedFloatUnit = [node.nodes[0].value, node.nodes[2].value, node.nodes[4].value].map(v => (0, _postcssValueParser.unit)(v)).some(t => t !== false && !/^[0-9]+$/.test(t.number));
    if (includedFloatUnit) {
      const index = offset + node.sourceIndex;
      const endIndex = offset + node.sourceEndIndex;
      features.push({
        endIndex,
        id: RULE_NAME_MAP[funcName],
        index,
        name: `Float values in ${funcName}() parameters`,
        node: parent
      });
    }
  }
  return features;
}