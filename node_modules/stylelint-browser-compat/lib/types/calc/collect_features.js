"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.collectFeatures = collectFeatures;
var _postcssValueParser = require("postcss-value-parser");
async function collectFeatures({
  node,
  parent
}) {
  const funcName = node.value.replace(/^-(?:ms|o|webkit|moz)-/, '');
  if (funcName !== 'calc') {
    return [];
  }
  const features = [];
  const offset = parent.prop.length + (parent.raws.between?.length ?? 0);
  let areAllValuesNumber = true;
  for (const child of node.nodes) {
    if (child.type === 'function') {
      const funcName = child.value.replace(/^-(?:ms|o|webkit|moz)-/, '');
      if (funcName === 'calc') {
        const index = offset + child.sourceIndex;
        const endIndex = offset + child.sourceEndIndex;
        features.push({
          endIndex,
          id: `types.calc.nested`,
          index,
          name: `Nested calc()`,
          node: parent
        });
      }
    }
    if (child.type === 'word') {
      const {
        unit: unitName
      } = (0, _postcssValueParser.unit)(child.value) || {
        number: null,
        unit: null
      };
      if (unitName != null && unitName !== '') {
        areAllValuesNumber = false;
      }
    }
  }
  if (areAllValuesNumber) {
    const index = offset + node.sourceIndex;
    const endIndex = offset + node.sourceEndIndex;
    features.push({
      endIndex,
      id: `types.calc.number_values`,
      index,
      name: `<number> value with calc()`,
      node: parent
    });
  }
  return features;
}