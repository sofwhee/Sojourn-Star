"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.collectFeatures = collectFeatures;
var _arrayPrototype = _interopRequireDefault(require("array.prototype.at"));
var _stringPrototype = _interopRequireDefault(require("string.prototype.at"));
var _postcssValueParser = require("postcss-value-parser");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
async function collectFeatures({
  colorStop,
  colorStopIndex,
  node,
  parent
}) {
  const funcName = node.value.replace(/^-(?:ms|o|webkit|moz)-/, '');
  if (funcName !== 'radial-gradient' && funcName !== 'repeating-radial-gradient') {
    return [];
  }
  const features = [];
  const offset = parent.prop.length + (parent.raws.between?.length ?? 0);
  if (colorStopIndex !== 0 && colorStop.length === 1 && colorStop[0]?.type === 'word' && (0, _postcssValueParser.unit)(colorStop[0].value) !== false) {
    var _colorStop;
    const index = offset + (colorStop[0]?.sourceIndex ?? 0);
    const endIndex = offset + ((_colorStop = colorStop, typeof _colorStop === "string" ? _stringPrototype.default : Array.isArray(_colorStop) ? _arrayPrototype.default : Function.call.bind(_colorStop.at))(_colorStop, -1)?.sourceEndIndex ?? 0);
    features.push({
      endIndex,
      id: `types.image.gradient.${funcName}.interpolation_hints`,
      index,
      name: `Interpolation hints for ${funcName}()`,
      node: parent
    });
  }
  return features;
}